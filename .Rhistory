library(readxl)
Global_Superstore <- read_excel("Desktop/Tableau Work/Desktop I - Fundamentals (Virtual Live Classroom)/USB/Data/Global Superstore.xlsx")
View(Global_Superstore)
demo
demo()
help.start()
install.packages("tidyverse")
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
revenue
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
expenses
mayrevenue <- revenue[5]
mayrevenue
revenue[5]-expenses[5]
profit  <- revenue - expenses
revenue
expenses
profit <- revenue - expenses
profit
tax <- 0.30 * profit
tax
library(readr)
library(ggplot2)
library(tidyverse)
library(reshape2)
gs_sheet <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQ18DZKUXFThDnRmg7N1efZMRZxW5tr9sNRsgQUoygSzab05DeMUIQqzuZoJa45AIIg6bnX5NcuAjYK/pub?gid=0&single=true&output=csv")
gs_sheet <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQ18DZKUXFThDnRmg7N1efZMRZxW5tr9sNRsgQUoygSzab05DeMUIQqzuZoJa45AIIg6bnX5NcuAjYK/pub?gid=0&single=true&output=csv")
library(readr)
library(ggplot2)
library(tidyverse)
library(reshape2)
gs_sheet <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQ18DZKUXFThDnRmg7N1efZMRZxW5tr9sNRsgQUoygSzab05DeMUIQqzuZoJa45AIIg6bnX5NcuAjYK/pub?gid=0&single=true&output=csv")
# let's create a temporary table to play with
mydata <- gs_sheet
# select only certain columns
mydata %>%
select(Election.Cycle)
# select only certain columns
mydata %>%
select(Election.Cycle)
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican)
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican)
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican)
# filter to filter out only certain types of records
# filter on one column
mydata %>%
filter(Respondent.Type == "registered voters")
# filter on more than one
mydata %>%
filter(Respondent.Type == "registered voters", Election.Cycle == 2008)
#What about the date -- is it formatted as a true date?  No.
#We'll use the lubridate package to help us
# https://lubridate.tidyverse.org/
results$Poll.start.date <- lubridate::mdy(results$Poll.start.date)
library(readr)
library(ggplot2)
library(tidyverse)
library(reshape2)
gs_sheet <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vQ18DZKUXFThDnRmg7N1efZMRZxW5tr9sNRsgQUoygSzab05DeMUIQqzuZoJa45AIIg6bnX5NcuAjYK/pub?gid=0&single=true&output=csv")
#### WHAT IS DPLYR? AND WHY DOES IT MAKE DATA CRUNCHING (FOR DATAFRAMES) EASIER? ####
# The dplyr package is part of the tidyverse -- it's design to make
# data analysis tasks like filtering, sorting and grouping much easier
# to both perform and to read yourself next time you look at the code
# it uses something called the PIPE %>% (shortcut is CTRL/CMD + M)
# let's create a temporary table to play with
mydata <- gs_sheet
# select only certain columns
mydata %>%
select(Election.Cycle)
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican)
# filter to filter out only certain types of records
# filter on one column
mydata %>%
filter(Respondent.Type == "registered voters")
# filter on more than one
mydata %>%
filter(Respondent.Type == "registered voters", Election.Cycle == 2008)
# The beauty of PIPING is that you can then combine multiple functions
# one after the other. Let's see how that works
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican) %>%
filter(Respondent.Type == "registered voters", Election.Cycle == 2008)
# one more step, let's say we wanted to sort - could use ARRANGE
mydata %>%
select(Election.Cycle, Respondent.Type, Poll.start.date, Democratic, Republican) %>%
filter(Respondent.Type == "registered voters", Election.Cycle == 2008) %>%
arrange(Democratic) # to see descending add desc()
#### GETTING RAW RESULTS DATA READY, CALCULATIONS AND CLEANING ####
#data for table - we'll create a new named object
#let's choose only the columns/variables we care about
results <- gs_sheet %>%
select(Election.Cycle, Pres.Or.Midterm, Respondent.Type, Poll.start.date, Democratic, Republican)
#Let's ensure the percentages are formatted as numeric
results$Democratic <- as.numeric(results$Democratic/100)
results$Republican <- as.numeric(results$Republican/100)
#What about the date -- is it formatted as a true date?  No.
#We'll use the lubridate package to help us
# https://lubridate.tidyverse.org/
results$Poll.start.date <- lubridate::mdy(results$Poll.start.date)
View(results)
#Now let's think about what we might want to highlight for a story
#How about the margin by which the Democrat won or lost the generic contest?
#calculating that is as simple as subtracting one variable from another
results$Democratic-results$Republican
#now let's do the same thing but this time creating a whole new column/variable
results$Dem.Margin <- round((results$Democratic-results$Republican)*100,0)
#Now let's think about what we might want to highlight for a story
#How about the margin by which the Democrat won or lost the generic contest?
#calculating that is as simple as subtracting one variable from another
results$newcolumn <- results$Democratic-results$Republican
#finally, let's make election cycle a factor since it's categorical,
#not a number we'd be adding or doing math on
results$Election.Cycle <- as.factor(results$Election.Cycle)
#what did we get?
head(results)
results$newcolumn <- NULL
#what did we get?
head(results)
#recast data to tidy format
#let's now worry about how "melt" works for now - will be dealt with in later sessions
registered_tidy <- melt(registered, id.vars = c("Poll.start.date"))
#pull out just relevant columns
registered <- results %>%
filter(Respondent.Type == "registered voters") %>%
select(Poll.start.date, Democratic, Republican)
#pull out just relevant columns
registered <- results %>%
filter(Respondent.Type == "registered voters") %>%
select(Poll.start.date, Democratic, Republican)
#pull out just relevant columns
registered <- results %>%
filter(Respondent.Type == "registered voters") %>%
select(Poll.start.date, Democratic, Republican)
#recast data to tidy format
#let's now worry about how "melt" works for now - will be dealt with in later sessions
registered_tidy <- melt(registered, id.vars = c("Poll.start.date"))
#Ok let's try this out on our generic ballot results
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_line()
#This is a little hard to see what's going on
#Let's try to create trendlines using "smooth"
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_line() +
geom_smooth()
#Ok let's try this out on our generic ballot results
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_bar()
#Ok let's try this out on our generic ballot results
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_line()
#This is a little hard to see what's going on
#Let's try to create trendlines using "smooth"
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_line() +
geom_smooth()
#What if we add some labels to this chart too to make it more readable
ggplot(registered_tidy, aes(x=Poll.start.date, y=value, color = variable)) +
geom_line() +
geom_smooth() +
labs(title = "Generic Congressional Ballot Preference", x = "Poll Date",
y = "Pct of Respondents", col = "")
#We can use the "DT" package to easily make a sortable, filterable, searchable data table
#Just this little bit of code does a whole lot - check it out:
DT::datatable(results, rownames = FALSE)
install.packages("DT")
